// Code generated by mockery v2.43.2. DO NOT EDIT.

package daomocks

import (
	context "context"

	entities "github.com/in-rich/uservice-notes/pkg/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockListNotesByAuthorRepository is an autogenerated mock type for the ListNotesByAuthorRepository type
type MockListNotesByAuthorRepository struct {
	mock.Mock
}

type MockListNotesByAuthorRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockListNotesByAuthorRepository) EXPECT() *MockListNotesByAuthorRepository_Expecter {
	return &MockListNotesByAuthorRepository_Expecter{mock: &_m.Mock}
}

// ListNotesByAuthor provides a mock function with given fields: ctx, authorID, limit, offset
func (_m *MockListNotesByAuthorRepository) ListNotesByAuthor(ctx context.Context, authorID string, limit int, offset int) ([]*entities.Note, error) {
	ret := _m.Called(ctx, authorID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListNotesByAuthor")
	}

	var r0 []*entities.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*entities.Note, error)); ok {
		return rf(ctx, authorID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*entities.Note); ok {
		r0 = rf(ctx, authorID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, authorID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockListNotesByAuthorRepository_ListNotesByAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNotesByAuthor'
type MockListNotesByAuthorRepository_ListNotesByAuthor_Call struct {
	*mock.Call
}

// ListNotesByAuthor is a helper method to define mock.On call
//   - ctx context.Context
//   - authorID string
//   - limit int
//   - offset int
func (_e *MockListNotesByAuthorRepository_Expecter) ListNotesByAuthor(ctx interface{}, authorID interface{}, limit interface{}, offset interface{}) *MockListNotesByAuthorRepository_ListNotesByAuthor_Call {
	return &MockListNotesByAuthorRepository_ListNotesByAuthor_Call{Call: _e.mock.On("ListNotesByAuthor", ctx, authorID, limit, offset)}
}

func (_c *MockListNotesByAuthorRepository_ListNotesByAuthor_Call) Run(run func(ctx context.Context, authorID string, limit int, offset int)) *MockListNotesByAuthorRepository_ListNotesByAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockListNotesByAuthorRepository_ListNotesByAuthor_Call) Return(_a0 []*entities.Note, _a1 error) *MockListNotesByAuthorRepository_ListNotesByAuthor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockListNotesByAuthorRepository_ListNotesByAuthor_Call) RunAndReturn(run func(context.Context, string, int, int) ([]*entities.Note, error)) *MockListNotesByAuthorRepository_ListNotesByAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockListNotesByAuthorRepository creates a new instance of MockListNotesByAuthorRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockListNotesByAuthorRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockListNotesByAuthorRepository {
	mock := &MockListNotesByAuthorRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
