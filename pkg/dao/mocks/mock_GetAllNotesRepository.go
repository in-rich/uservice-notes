// Code generated by mockery v2.46.0. DO NOT EDIT.

package daomocks

import (
	context "context"

	entities "github.com/in-rich/uservice-notes/pkg/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockGetAllNotesRepository is an autogenerated mock type for the GetAllNotesRepository type
type MockGetAllNotesRepository struct {
	mock.Mock
}

type MockGetAllNotesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetAllNotesRepository) EXPECT() *MockGetAllNotesRepository_Expecter {
	return &MockGetAllNotesRepository_Expecter{mock: &_m.Mock}
}

// GetAllNotes provides a mock function with given fields: ctx, limit, offset
func (_m *MockGetAllNotesRepository) GetAllNotes(ctx context.Context, limit int64, offset int64) ([]*entities.Note, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetAllNotes")
	}

	var r0 []*entities.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) ([]*entities.Note, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) []*entities.Note); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGetAllNotesRepository_GetAllNotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllNotes'
type MockGetAllNotesRepository_GetAllNotes_Call struct {
	*mock.Call
}

// GetAllNotes is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int64
//   - offset int64
func (_e *MockGetAllNotesRepository_Expecter) GetAllNotes(ctx interface{}, limit interface{}, offset interface{}) *MockGetAllNotesRepository_GetAllNotes_Call {
	return &MockGetAllNotesRepository_GetAllNotes_Call{Call: _e.mock.On("GetAllNotes", ctx, limit, offset)}
}

func (_c *MockGetAllNotesRepository_GetAllNotes_Call) Run(run func(ctx context.Context, limit int64, offset int64)) *MockGetAllNotesRepository_GetAllNotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockGetAllNotesRepository_GetAllNotes_Call) Return(_a0 []*entities.Note, _a1 error) *MockGetAllNotesRepository_GetAllNotes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGetAllNotesRepository_GetAllNotes_Call) RunAndReturn(run func(context.Context, int64, int64) ([]*entities.Note, error)) *MockGetAllNotesRepository_GetAllNotes_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGetAllNotesRepository creates a new instance of MockGetAllNotesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetAllNotesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetAllNotesRepository {
	mock := &MockGetAllNotesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
