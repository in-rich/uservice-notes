// Code generated by mockery v2.43.2. DO NOT EDIT.

package daomocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockCountUpdatesSinceRepository is an autogenerated mock type for the CountUpdatesSinceRepository type
type MockCountUpdatesSinceRepository struct {
	mock.Mock
}

type MockCountUpdatesSinceRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCountUpdatesSinceRepository) EXPECT() *MockCountUpdatesSinceRepository_Expecter {
	return &MockCountUpdatesSinceRepository_Expecter{mock: &_m.Mock}
}

// CountUpdatesSince provides a mock function with given fields: ctx, authorID, since
func (_m *MockCountUpdatesSinceRepository) CountUpdatesSince(ctx context.Context, authorID string, since time.Time) (int, error) {
	ret := _m.Called(ctx, authorID, since)

	if len(ret) == 0 {
		panic("no return value specified for CountUpdatesSince")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) (int, error)); ok {
		return rf(ctx, authorID, since)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) int); ok {
		r0 = rf(ctx, authorID, since)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time) error); ok {
		r1 = rf(ctx, authorID, since)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCountUpdatesSinceRepository_CountUpdatesSince_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountUpdatesSince'
type MockCountUpdatesSinceRepository_CountUpdatesSince_Call struct {
	*mock.Call
}

// CountUpdatesSince is a helper method to define mock.On call
//   - ctx context.Context
//   - authorID string
//   - since time.Time
func (_e *MockCountUpdatesSinceRepository_Expecter) CountUpdatesSince(ctx interface{}, authorID interface{}, since interface{}) *MockCountUpdatesSinceRepository_CountUpdatesSince_Call {
	return &MockCountUpdatesSinceRepository_CountUpdatesSince_Call{Call: _e.mock.On("CountUpdatesSince", ctx, authorID, since)}
}

func (_c *MockCountUpdatesSinceRepository_CountUpdatesSince_Call) Run(run func(ctx context.Context, authorID string, since time.Time)) *MockCountUpdatesSinceRepository_CountUpdatesSince_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time))
	})
	return _c
}

func (_c *MockCountUpdatesSinceRepository_CountUpdatesSince_Call) Return(_a0 int, _a1 error) *MockCountUpdatesSinceRepository_CountUpdatesSince_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCountUpdatesSinceRepository_CountUpdatesSince_Call) RunAndReturn(run func(context.Context, string, time.Time) (int, error)) *MockCountUpdatesSinceRepository_CountUpdatesSince_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCountUpdatesSinceRepository creates a new instance of MockCountUpdatesSinceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCountUpdatesSinceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCountUpdatesSinceRepository {
	mock := &MockCountUpdatesSinceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
